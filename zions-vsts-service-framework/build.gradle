import org.gradle.api.internal.artifacts.publish.DefaultPublishArtifact

apply plugin: 'maven'
apply plugin: 'us.kirchmeier.capsule'
apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'
apply plugin: 'groovy'
apply plugin: 'jacoco'
if ("${buildType}" == 'ci') {
	apply plugin: 'codenarc'
}
buildscript {
	repositories {
		maven {
			name 'ZionsNexusPublicSnapshots'
			url "${nexusUrl}/repository/public-snapshots/"
		}
		maven {
			name 'ZionsNexusPublic'
			url "${nexusUrl}/repository/public/"
		}
	}
	dependencies {
		classpath "us.kirchmeier:gradle-capsule-plugin:1.0.2",
        classpath 'org.springframework.boot:spring-boot-gradle-plugin:2.0.0.RELEASE'
	}
}
//apply plugin: 'gradle-one-jar'

//buildscript {
//	repositories {
//		mavenCentral()
//	}
//	dependencies {
//		classpath 'com.github.rholder:gradle-one-jar:1.0.4'
//	}
//}

repositories {
	mavenLocal()
	maven {
		name 'ZionsNexusPublicSnapshots'
		url "${nexusUrl}/repository/public-snapshots/"
	}	
	maven {
		name 'ZionsNexusPublic'
		url "${nexusUrl}/repository/public/"
	}
}

configurations {
    testPlugins {}
}

// Exclude buggy Xalan dependency this way the JRE default TransformerFactory is used
// The xalan pulled in by htmlunit does not properly deal with spaces folder / job names
configurations.all*.exclude group: 'xalan'

dependencies {
	// https://mvnrepository.com/artifact/org.apache.httpcomponents/httpclient
	// https://mvnrepository.com/artifact/com.github.rholder/gradle-one-jar
	compile group: 'org.apache.httpcomponents', name: 'httpclient', version: '4.5.1'
	compile 'org.codehaus.groovy:groovy-all:2.4.7'
	compile 'org.apache.ivy:ivy:2.4.0'
	compile 'bsf:bsf:2.4.0'
	compile 'commons-io:commons-io:2.5'
	compile 'commons-cli:commons-cli:1.3.1'
	compile 'org.slf4j:slf4j-api:1.6.4'
	compile 'ch.qos.logback:logback-classic:1.2.3'
	
    testCompile(
            'junit:junit:4.12',
			'cglib:cglib-nodep:3.1',
			'org.objenesis:objenesis:2.4',
            'org.codehaus.groovy:groovy-all:2.4.7',
            'org.spockframework:spock-core:1.0-groovy-2.4'
    )}
jacocoTestCoverageVerification {
	violationRules {
		rule {
 			limit {
				minimum = 0.5
			}
		}
	
	}
//	afterEvaluate {
//		classDirectories = files(classDirectories.files.collect {
//			fileTree(dir: it, exclude: [
//					'**/*Test**'
//			])
//		})
//	}

	
}
jacocoTestReport {
	reports {
		xml.enabled false
		csv.enabled false
		html.destination file("${buildDir}/jacocoHtml")
	}
//    afterEvaluate {
//        classDirectories = files(classDirectories.files.collect {
//            fileTree(dir: it, exclude: [
//                    '**/*Test**'
//            ])
//        })
//    }
}
if ("${buildType}" == 'ci') {
	codenarcMain {
		ignoreFailures false
		configFile file('config/ruleset/CodeNarc-main.rules')
	
		maxPriority1Violations 0
		maxPriority2Violations 30
		maxPriority3Violations 30
	}
	codenarcTest {
		ignoreFailures true
		configFile file('config/ruleset/CodeNarc-test.rules')
	
		maxPriority1Violations 0
		maxPriority2Violations 10
		maxPriority3Violations 20
	}

	check.dependsOn jacocoTestCoverageVerification, jacocoTestReport
}
/**
 * Code to use Maven settings.xml for server creds for uploadArchives
 */
def getMavenSettingsCredentials = {
	String userHome = System.getProperty( "user.home" );
	def settingsFile = project.hasProperty('maven.settings.location') ? project.getProperty('maven.settings.location') : "${userHome}/settings.xml"
	File mavenSettings = new File(settingsFile)
	def xmlSlurper = new XmlSlurper()
	def output = xmlSlurper.parse(mavenSettings)
	return output."servers"."server"
}

/**
 * Code to use Maven settings.xml for server creds for uploadArchives
 */
def getCredentials = {
	def entries = getMavenSettingsCredentials()
	for (entry in entries) {
		if ( entry."id".text() == "nexus" ) {
			return [username: entry.username.text(), password: entry.password.text()]
		}
	}
}

artifacts{
	//archives new DefaultPublishArtifact("${rootProject.name}", "jar", "jar", null, new Date(), new File("build/libs", "${rootProject.name}-${version}.jar"))
	archives new DefaultPublishArtifact("${rootProject.name}-capsule", "jar", "jar", null, new Date(), new File("build/libs", "${rootProject.name}-${version}-capsule.jar"))
}

uploadArchives {
	/**
	 * Code to use Maven settings.xml for server creds for uploadArchives
	 */
	def creds = getCredentials()
	def nexusUsername = creds["username"]
	def nexusPassword = creds["password"]
	repositories {
		mavenDeployer {
			repository(url: "${nexusUrl}/repository/releases") {
				authentication(userName: nexusUsername, password: nexusPassword)
			}
			snapshotRepository(url: "${nexusUrl}/repository/maven-snapshots") {
				authentication(userName: nexusUsername, password: nexusPassword)
			}
			//addFilter("${rootProject.name}") {artifact, file ->
				//artifact.name == "${rootProject.name}"
			//}
			addFilter("${rootProject.name}-capsule") {artifact, file ->
				artifact.name == "${rootProject.name}-capsule"
			}
		}
	}
}


task zionvstsservicesJar(type: FatCapsule) {
	applicationClass 'com.zionsbancorp.clm.app.RiskMain'
//	archiveName 'rrmtorqm.jar'
	capsuleManifest {
		minJavaVersion = '1.8.0'
		applicationVersion = "${version}"
	}
}
build.finalizedBy(rrmtorqmJar)