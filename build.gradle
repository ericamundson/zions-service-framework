import groovy.json.JsonBuilder
import groovy.json.JsonSlurper

buildscript {
	ext {
		springCloudVersion = 'Greenwich.SR2'
	}
	repositories {
		if ("${queue}" == 'Hosted') {
			mavenCentral()
			jcenter()
		}
		flatDir { dirs "libs" }
		maven {
			name 'ZionsNexusPublicSnapshots'
			url "${nexusUrl}/repository/public-snapshots/"
		}
		maven {
			name 'ZionsNexusPublic'
			url "${nexusUrl}/repository/public/"
		}
	}
	dependencies {
		classpath "org.springframework.boot:spring-boot-gradle-plugin:${project.springBootVersion}"
		//		classpath 'com.zions.gradle:gplantumlPlugin:0.1.6'
		//		classpath 'net.sourceforge.plantuml:plantuml:8059'
		classpath 'org.ajoberstar:gradle-git-publish:2.1.3'
		classpath 'com.bmuschko:gradle-docker-plugin:6.6.1'
		classpath 'gradle.plugin.io.errorlab.gradle.vault:vault:0.1.0'
		classpath 'com.github.qwazer:markdown-confluence-gradle-plugin:0.9.2'
		classpath 'com.zions.dts.services:zions-boot:latest.release'
	}
}

allprojects {
	apply plugin: 'maven'
	apply plugin: 'maven-publish'
	apply plugin: 'org.springframework.boot'
	apply plugin: 'io.spring.dependency-management'
	apply plugin: 'groovy'
	//	apply plugin: 'gplantuml'
	//	apply plugin: 'mdplantuml'
	apply plugin: 'org.ajoberstar.git-publish'
	apply plugin: 'com.bmuschko.docker-remote-api'
	apply plugin: 'com.bmuschko.docker-spring-boot-application'
	apply plugin: 'com.github.qwazer.markdown-confluence'

	//File bootstrap = new File("${vaultResources}/bootstrap.properties")
	InputStream istream = this.getClass().getResourceAsStream('/bootstrap.properties')
	if ("${buildType}" == 'ci') {
		apply plugin: 'jacoco'
		//apply plugin: 'codenarc'
		jacocoTestCoverageVerification {
			violationRules {
				rule { limit { minimum = 0.1 } }
			}
			//	afterEvaluate {
			//		classDirectories = files(classDirectories.files.collect {
			//			fileTree(dir: it, exclude: [
			//					'**/*Test**'
			//			])
			//		})
			//	}


		}
		jacocoTestReport {
			reports {
				xml.enabled false
				csv.enabled false
				html.destination file("${buildDir}/jacocoHtml")
			}
			//    afterEvaluate {
			//        classDirectories = files(classDirectories.files.collect {
			//            fileTree(dir: it, exclude: [
			//                    '**/*Test**'
			//            ])
			//        })
			//    }
		}

		check.dependsOn jacocoTestReport
	}
	//	if (bootstrap.exists()) {
	//		apply plugin: 'io.errorlab.gradle.vault'
	//		Properties props = new Properties()
	//		props.load(new FileInputStream("${vaultResources}/bootstrap.properties"))
	if (istream != null) {
		apply plugin: 'io.errorlab.gradle.vault'
		Properties props = new Properties()
		props.load(istream)

		props.each { prop ->
			project.ext.set(prop.key, prop.value)
		}
		vault {
			addr = "${project.'vault.url'}"
			token = "${project.'spring.cloud.vault.token'}"
		}
		def secrets = project.vault.get('secret/data/zions-service-framework')
		if (secrets) {
			def jsonText = new JsonBuilder(secrets).toPrettyString()
			def vaultData = new JsonSlurper().parseText(jsonText)
			project.ext.set('secretData', vaultData)
			docker {
				//		url = property 'dockerHostUrl'
				registryCredentials {
					url = "${property 'registryHostUrl'}"
					username = "${project.secretData.data.data['nexus.docker.user']}"
					password = "${project.secretData.data.data['nexus.docker.password']}"
				}
			}
			System.setProperty('org.ajoberstar.grgit.auth.username', "${project.secretData.data.data['doc.token']}")
		}
	}

	// Start generatation of framework documentation
	sourceSets {
		groovydoc {
			resources { srcDir 'src/groovydoc' }
		}
	}
	groovydoc {
		classpath = sourceSets.groovydoc.output + classpath
	}

	task copyDesigns(type: Copy) {
		from('src/main/groovy') { include '**/*.svg' }
		into 'build/docs/groovydoc'
		dependsOn 'groovydoc'
	}

	task fullGroovydoc(type: Delete) {
		delete fileTree('src/main/groovy') {
			include '**/*.png'
			include '**/*.svg'
			include '**/*.cmapx'
		}
		dependsOn 'copyDesigns'


	}
	gitPublish {
		// where to publish to (repo must exist)
		repoUri = "https://dev.azure.com/ZionsETO/DTS/_git/zions-service-framework-doc"
		// (or 'https://github.com/ajoberstar/test-repo.git', depending on authentication)

		// branch will be created if it doesn't exist
		branch = 'master'

		// generally, you don't need to touch this
		repoDir = file("${publishLocation}") // defaults to $buildDir/gitPublish

		// what to publish, this is a standard CopySpec
		contents {
			from('build/docs/groovydoc') { include '**/*' }
			into "${project.name}"
		}


		// what to keep in the existing branch (include=keep)
		preserve {
			include '*/**'
			exclude '1.0.0/temp.txt'
		}

		// message used when committing changes
		commitMessage = 'Publishing version ' + "${version}" + ' documentation'
	}
	ext['groovy.version'] = '3.0.1'

	gitPublishPush.dependsOn 'fullGroovydoc'
	//	task publishDocs( type: Copy ) {
	//		from('build/docs/groovydoc') { include '**/*' }
	//		into "${publishLocation}/${project.name}"
	//		dependsOn 'fullGroovydoc'
	//
	//	}
	// End generation of framework documentation
	//	sourceSets.main.resources {
	//		srcDir '../common/resources'
	//srcDir '../common/groovydoc'
	//		srcDir "${vaultResources}"
	//	}



	bootJar { enabled = false }
	//version = '1.0.0-SNAPSHOT'
	sourceCompatibility = 1.8
	targetCompatibility = 1.8

	repositories {
		if ("${queue}" == 'Hosted') {
			mavenCentral()
			maven {
				name 'spring'
				url "http://repo.spring.io/plugins-release/"
			}
		}
		mavenLocal()
		maven {
			name 'ZionsNexusPublicSnapshots'
			url "${nexusUrl}/repository/public-snapshots/"
		}
		maven {
			name 'ZionsNexusPublic'
			url "${nexusUrl}/repository/public/"
		}
		//mavenCentral()
		maven {
			url 'https://dist.xebialabs.com/public/maven2'
		}
	}

	dependencies {
		if (context != 'nexus') {
			implementation "org.springframework.boot:spring-boot-starter:${project.springBootVersion}"
			implementation('org.springframework.cloud:spring-cloud-starter-vault-config:2.2.7.RELEASE')
		} else {
			implementation group: 'org.springframework', name: 'spring-beans', version: '5.2.2.RELEASE'
			implementation group: 'org.springframework', name: 'spring-context', version: '5.2.2.RELEASE'
			implementation group: 'org.springframework', name: 'spring-core', version: '5.2.2.RELEASE'
		}
		//implementation group: 'org.mongodb', name: 'mongo-java-driver', version: '3.3.0'
		implementation group: 'org.apache.httpcomponents', name: 'httpclient', version: '4.5.13'
		implementation 'org.codehaus.groovy:groovy-dateutil:3.0.1'
		implementation 'org.codehaus.groovy:groovy-yaml:3.0.1'
		implementation 'org.codehaus.groovy:groovy-all:3.0.1'
		implementation 'org.apache.ivy:ivy:2.4.0'
		implementation 'bsf:bsf:2.4.0'
		implementation 'commons-io:commons-io:2.5'
		implementation 'commons-cli:commons-cli:1.3.1'

		implementation('org.codehaus.groovy.modules.http-builder:http-builder:0.7.2') { exclude(module: 'groovy') }
		constraints {
			// Upgrade commons libraries that have vulnerabilities
			implementation('net.sf.json-lib:json-lib:2.3')
			constraints {
				implementation 'commons-beanutils:commons-beanutils:1.9.4'
				implementation 'commons-collections:commons-collections:3.2.2'
			}
		}

		if (context != 'nexus')

			testImplementation(
					"org.springframework.boot:spring-boot-starter-test:${project.springBootVersion}",
					'org.springframework:spring-mock:2.0.8',
					'cglib:cglib-nodep:3.1',
					//'com.athaydes:spock-reports:1.6.2',
					//files('../libs/spock-reports-1.6.2.jar'),
					//'junit:junit:4.12'
					'org.junit.jupiter:junit-jupiter-api:5.6.2',
					'org.junit.jupiter:junit-jupiter-params:5.6.2',
					'org.objenesis:objenesis:2.4',
					'org.codehaus.groovy:groovy-all:3.0.1',
					'org.spockframework:spock-core:2.0-M2-groovy-3.0',
					//'org.spockframework:spock-junit4:2.0-M2-groovy-3.0',
					'org.spockframework:spock-spring:2.0-M2-groovy-3.0'
					)
		//testImplementation files('libs/spock-reports-1.6.2.jar')
		//implementation ('org.junit.jupiter:junit-jupiter-api:5.5.2')
		testRuntime('org.junit.jupiter:junit-jupiter-engine:5.6.2')
	}

	dependencyManagement {
		imports {
			mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
		}
	}
	task mdplantuml {
		doLast {
			ant.exec(executable: 'cmd', dir: './', failonerror: true ) {
				arg( line: "/c \"java -jar ../libs/plantuml.1.2021.0.jar src/**/*.md -tsvg\"")
			}
		}
	}
	task gplantuml {
		doLast {
			ant.exec(executable: 'cmd', dir: './', failonerror: true ) {
				arg( line: "/c \"java -jar ../libs/plantuml.1.2021.0.jar src/**/*.groovy -tsvg\"")
			}
		}
	}
	test {
		//String activeProfile =  System.properties['spring.profiles.active']
		doFirst {
			mkdir "build/spock"
		}
		systemProperty "spring.profiles.active", 'test'
		useJUnitPlatform()
	}

	uploadArchives {
		/**
		 * Code to use Maven settings.xml for server creds for uploadArchives
		 */
		def nexusUsername = "${project.secretData.data.data['nexus.deployment.user']}"
		def nexusPassword = "${project.secretData.data.data['nexus.deployment.password']}"
		repositories {
			mavenDeployer {
				repository(url: "${nexusUrl}/repository/releases") {
					authentication(userName: nexusUsername, password: nexusPassword)
				}
				//			snapshotRepository(url: "${nexusUrl}/repository/maven-snapshots") {
				//				authentication(userName: nexusUsername, password: nexusPassword)
				//			}
				addFilter("${rootProject.name}") {artifact, file ->
					artifact.name != "${rootProject.name}"
				}
				//			addFilter("${project.name}") {artifact, file ->
				//				artifact.name == "${project.name}"
				//			}

				pom.version = "${version}"
				pom.artifactId = "${project.name}"
				pom.groupId = "com.zions.dts.services"
			}
		}
	}
}
