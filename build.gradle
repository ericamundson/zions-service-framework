import groovy.json.JsonBuilder
import groovy.json.JsonSlurper
buildscript {
	ext {
		springBootVersion = '3.3.2'
		springCloudVersion = '4.1.3'
		groovyVersion = '4.0.1'
		spockVersion = '2.4-M1-groovy-4.0'
		jdkVersion = '17'
		repoName = 'zions-service-framework'
	}
	repositories {
		if ("${queue}" == 'Hosted') {
			mavenCentral()
			jcenter()
		}
		flatDir { dirs "libs" }
		maven {
			name 'ZionsNexusPublicSnapshots'
			url "${nexusUrl}/repository/public-snapshots/"
		}
		maven {
			name 'ZionsNexusPublic'
			url "${nexusUrl}/repository/public/"
		}
	}
	dependencies {
		classpath "org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}"
		//		classpath 'com.zions.gradle:gplantumlPlugin:0.1.6'
		//		classpath 'net.sourceforge.plantuml:plantuml:8059'
		classpath 'org.ajoberstar:gradle-git-publish:2.1.3'
		classpath 'com.bmuschko:gradle-docker-plugin:6.6.1'
		classpath 'gradle.plugin.io.errorlab.gradle.vault:vault:0.1.0'
		classpath 'com.github.qwazer:markdown-confluence-gradle-plugin:0.9.2'
		classpath 'com.zions.dts.services:zions-boot:latest.release'
	}
}
allprojects {
	apply plugin: 'maven-publish'
	apply plugin: 'org.springframework.boot'
	apply plugin: 'io.spring.dependency-management'
	apply plugin: 'groovy'
	apply plugin: 'org.ajoberstar.git-publish'
	apply plugin: 'com.bmuschko.docker-remote-api'
	apply plugin: 'com.bmuschko.docker-spring-boot-application'
	apply plugin: 'com.github.qwazer.markdown-confluence'
	//File bootstrap = new File("${vaultResources}/bootstrap.properties")
	InputStream istream = this.getClass().getResourceAsStream('/bootstrap.properties')
	if ("${buildType}" == 'ci') {
		apply plugin: 'jacoco'
		//apply plugin: 'codenarc'
		jacocoTestCoverageVerification {
			violationRules {
				rule { limit { minimum = 0.1 } }
			}
		}
		jacocoTestReport {
			reports {
				xml.enabled false
				csv.enabled false
				html.destination file("${buildDir}/jacocoHtml")
			}
		}
		check.dependsOn jacocoTestReport
	}
	if (istream != null) {
		apply plugin: 'io.errorlab.gradle.vault'
		Properties props = new Properties()
		props.load(istream)
		props.each { prop ->
			project.ext.set(prop.key, prop.value)
		}
		vault {
			addr = "${project.'vault.url'}"
			token = "${project.'spring.cloud.vault.token'}"
		}
		def secrets = project.vault.get('secret/data/zions-service-framework')
		if (secrets) {
			def jsonText = new JsonBuilder(secrets).toPrettyString()
			def vaultData = new JsonSlurper().parseText(jsonText)
			project.ext.set('secretData', vaultData)
			docker {
				//		url = property 'dockerHostUrl'
				registryCredentials {
					url = "${property 'registryHostUrl'}"
					username = "${project.secretData.data.data['nexus.docker.user']}"
					password = "${project.secretData.data.data['nexus.docker.password']}"
				}
			}
			System.setProperty('org.ajoberstar.grgit.auth.username', "${project.secretData.data.data['doc.token']}")
		}
	}
	// Start generatation of framework documentation
	sourceSets {
		groovydoc {
			resources { srcDir 'src/groovydoc' }
		}
	}
	groovydoc {
		classpath = sourceSets.groovydoc.output + classpath
	}
	task copyDesigns(type: Copy) {
		from('src/main/groovy') { include '**/*.svg' }
		into 'build/docs/groovydoc'
		dependsOn 'groovydoc'
	}
	task fullGroovydoc(type: Delete) {
		delete fileTree('src/main/groovy') {
			include '**/*.png'
			include '**/*.svg'
			include '**/*.cmapx'
		}
		dependsOn 'copyDesigns'
	}
	gitPublish {
		// where to publish to (repo must exist)
		repoUri = "https://dev.azure.com/ZionsETO/DTS/_git/zions-service-framework-doc"
		// (or 'https://github.com/ajoberstar/test-repo.git', depending on authentication)
		// branch will be created if it doesn't exist
		branch = 'master'
		// generally, you don't need to touch this
		repoDir = file("${publishLocation}") // defaults to $buildDir/gitPublish
		// what to publish, this is a standard CopySpec
		contents {
			from('build/docs/groovydoc') { include '**/*' }
			into "${project.name}"
		}
		// what to keep in the existing branch (include=keep)
		preserve {
			include '*/**'
			exclude '1.0.0/temp.txt'
		}
		// message used when committing changes
		commitMessage = 'Publishing version ' + "${version}" + ' documentation'
	}
	ext['groovy.version'] = groovyVersion
	gitPublishPush.dependsOn 'fullGroovydoc'
	bootJar { enabled = false }
	//version = '1.0.0-SNAPSHOT'
	sourceCompatibility = 17
	targetCompatibility = 17
	repositories {
		if ("${queue}" == 'Hosted') {
			mavenCentral()
			maven {
				name 'spring'
				url "http://repo.spring.io/plugins-release/"
			}
		}
		mavenLocal()
		maven {
			name 'ZionsNexusPublicSnapshots'
			url "${nexusUrl}/repository/public-snapshots/"
		}
		maven {
			name 'ZionsNexusPublic'
			url "${nexusUrl}/repository/public/"
		}
		//mavenCentral()
//		maven {
//			url 'https://dist.xebialabs.com/public/maven2'
//		}
	}
	dependencies {
		implementation "org.springframework.boot:spring-boot-starter:${springBootVersion}"
		implementation("org.springframework.cloud:spring-cloud-starter-vault-config:${springCloudVersion}")
		implementation group: 'org.apache.httpcomponents', name: 'httpclient', version: '4.5.13'
		implementation "org.apache.groovy:groovy-dateutil:${groovyVersion}"
		implementation "org.apache.groovy:groovy-yaml:${groovyVersion}"
		implementation "org.apache.groovy:groovy-xml:${groovyVersion}"
		implementation "org.apache.groovy:groovy-json:${groovyVersion}"
		implementation "org.apache.groovy:groovy-sql:${groovyVersion}"
		implementation group: 'org.apache.httpcomponents', name: 'httpclient', version: '4.5.13'
		implementation 'org.apache.ivy:ivy:2.5.2'
		implementation 'bsf:bsf:2.4.0'
		implementation 'commons-io:commons-io:2.11.0'
		implementation 'commons-cli:commons-cli:1.3.1'
		implementation 'commons-lang:commons-lang:2.6'
		implementation 'ch.qos.logback:logback-classic:1.5.6'
		implementation 'ch.qos.logback:logback-core:1.5.6'
		implementation 'com.zions.dts.services:zions-boot:latest.release'
		
		constraints {
			// Upgrade commons libraries that have vulnerabilities
			implementation('net.sf.json-lib:json-lib:2.3')
			constraints {
				implementation 'commons-beanutils:commons-beanutils:1.9.4'
				implementation 'commons-collections:commons-collections:3.2.2'
			}
		}
		testImplementation(
			"org.springframework.boot:spring-boot-starter-test:${project.springBootVersion}",
			'org.springframework:spring-mock:2.0.8',
			'cglib:cglib-nodep:3.1',
			'org.objenesis:objenesis:2.4',
			"org.spockframework:spock-core:${spockVersion}",
			"org.spockframework:spock-spring:${spockVersion}"
				)
	}
	dependencyManagement {
		imports {
			mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
		}
	}
	task mdplantuml {
		doLast {
			ant.exec(executable: 'cmd', dir: './', failonerror: true ) {
				arg( line: "/c \"java -jar ../libs/plantuml.1.2021.0.jar src/**/*.md -tsvg\"")
			}
		}
	}
	task gplantuml {
		doLast {
			ant.exec(executable: 'cmd', dir: './', failonerror: true ) {
				arg( line: "/c \"java -jar ../libs/plantuml.1.2021.0.jar src/**/*.groovy -tsvg\"")
			}
		}
	}
	boolean doDebug = false
	if ("${debugTests}" == 'true' && project.name == 'zions-vsts-services') {
		doDebug = true
	}
	test {
		//String activeProfile =  System.properties['spring.profiles.active']
		doFirst {
			mkdir "build/spock"
		}
		systemProperty "spring.profiles.active", 'test'
		useJUnitPlatform()
		debug doDebug
	}
//	configurations.all {
//		resolutionStrategy.eachDependency { DependencyResolveDetails details ->
//			if (details.requested.group == 'org.yaml' && details.requested.name == 'snakeyaml') {
//				details.useVersion '2.0'
//			}
//			else if (details.requested.group == 'ch.qos.logback' &&
//				(details.requested.name == 'logback-classic' || details.requested.name == 'logback-core')) {
//				details.useVersion '1.5.6'
//			}
//		}
//	}
	publishing {
		/**
		 * Code to use Maven settings.xml for server creds for uploadArchives
		 */
	    publications {
	        mavenJava(MavenPublication) {
				from components.java
				artifactId = "${project.name}"
				groupId = "com.zions.dts.services"
				version = "${version}"
	        }
	    }
		repositories {
			maven {
				name = "ZionsNexusPublic"
				url = "${nexusUrl}/repository/releases"
				credentials {
					username = "${project.secretData.data.data['nexus.deployment.user']}"
					password = "${project.secretData.data.data['nexus.deployment.password']}"
				}
			}
		}	
	}
}
	
	