import groovy.json.JsonBuilder
import groovy.json.JsonSlurper
buildscript {
	ext { springBootVersion = '2.2.2.RELEASE'
		springCloudVersion = 'Greenwich.SR2'
	}
	repositories {
		if ("${queue}" == 'Hosted') {
			mavenCentral()
			jcenter()
		}
		flatDir { dirs "libs" }
		maven {
			name 'ZionsNexusPublicSnapshots'
			url "${nexusUrl}/repository/public-snapshots/"
		}
		maven {
			name 'ZionsNexusPublic'
			url "${nexusUrl}/repository/public/"
		}
	}
	dependencies {
		classpath "org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}"
		classpath 'com.zions.gradle:gplantumlPlugin:0.1.6'
		classpath 'net.sourceforge.plantuml:plantuml:8059'
		classpath 'org.ajoberstar:gradle-git-publish:2.0.0'
		classpath 'com.bmuschko:gradle-docker-plugin:6.6.1'
		classpath 'gradle.plugin.io.errorlab.gradle.vault:vault:0.1.0'
        classpath 'com.github.qwazer:markdown-confluence-gradle-plugin:0.9.2'
	}
}

allprojects {
	apply plugin: 'maven'
	apply plugin: 'org.springframework.boot'
	apply plugin: 'io.spring.dependency-management'
	apply plugin: 'groovy'
	apply plugin: 'gplantuml'
	apply plugin: 'mdplantuml'
	apply plugin: 'org.ajoberstar.git-publish'
	apply plugin: 'com.bmuschko.docker-remote-api'
	apply plugin: 'com.bmuschko.docker-spring-boot-application'
	apply plugin: 'com.github.qwazer.markdown-confluence'
	if ("${buildType}" == 'ci') {
		apply plugin: 'jacoco'
		//apply plugin: 'codenarc'
		jacocoTestCoverageVerification {
			violationRules {
				rule { limit { minimum = 0.1 } }
			}
			//	afterEvaluate {
			//		classDirectories = files(classDirectories.files.collect {
			//			fileTree(dir: it, exclude: [
			//					'**/*Test**'
			//			])
			//		})
			//	}


		}
		jacocoTestReport {
			reports {
				xml.enabled false
				csv.enabled false
				html.destination file("${buildDir}/jacocoHtml")
			}
			//    afterEvaluate {
			//        classDirectories = files(classDirectories.files.collect {
			//            fileTree(dir: it, exclude: [
			//                    '**/*Test**'
			//            ])
			//        })
			//    }
		}
		
		check.dependsOn jacocoTestReport
	} else {
		apply plugin: 'io.errorlab.gradle.vault'
		Properties props = new Properties()
		props.load(new FileInputStream("${vaultResources}/bootstrap.properties"))
		props.each { prop ->
		  project.ext.set(prop.key, prop.value)
		}
		vault {
			addr = "${project.'vault.url'}"
			token = "${project.'spring.cloud.vault.token'}"
		}
//		def secrets = project.vault.get('secret/data/zions-service-framework')
//		def jsonText = new JsonBuilder(secrets).toPrettyString()
//		def vaultData = new JsonSlurper().parseText(jsonText)
//		project.ext.set('secretData', vaultData) 
//		docker {
//	//		url = property 'dockerHostUrl'
//			registryCredentials {
//				url = "${property 'registryHostUrl'}"
//				username = "${project.secretData.data.data['nexus.docker.user']}"
//				password = "${project.secretData.data.data['nexus.docker.password']}"
//			}
//		}
//		String confluenceauth = "${project.secretData.data.data['confluence.user']}:${project.secretData.data.data['confluence.password']}".bytes.encodeBase64()
//	
//		confluence {
//			authentication "${confluenceauth}"
//			//restApiUrl 'http://utmvpw0054:8090/rest/api/'
//			restApiUrl 'https://zionsconfluence.cs.zionsbank.com/rest/api/'
//			spaceKey 'SCM'
//			sslTrustAll true
//			//pageVariables = ['project.name': project.name]
//			parseTimeout 2000L
//		
//		}
//		System.setProperty('org.ajoberstar.grgit.auth.username', "${project.secretData.data.data['doc.token']}")
	}

	// Start generatation of framework documentation
	sourceSets {
		groovydoc {
			resources { srcDir 'src/groovydoc' }
		}
	}
	groovydoc {
		classpath = sourceSets.groovydoc.output + classpath
	}

	task copyDesigns(type: Copy) {
		from('src/main/groovy') { include '**/*.svg' }
		into 'build/docs/groovydoc'
		dependsOn 'groovydoc'
	}

	task fullGroovydoc(type: Delete) {
		delete fileTree('src/main/groovy') {
			include '**/*.png'
			include '**/*.svg'
			include '**/*.cmapx'
		}
		dependsOn 'copyDesigns'


	}
	gitPublish {
		// where to publish to (repo must exist)
		repoUri = "https://dev.azure.com/ZionsETO/DTS/_git/zions-service-framework-doc"
		// (or 'https://github.com/ajoberstar/test-repo.git', depending on authentication)
	
		// branch will be created if it doesn't exist
		branch = 'master'
	
		// generally, you don't need to touch this
		repoDir = file("${publishLocation}") // defaults to $buildDir/gitPublish
	
		// what to publish, this is a standard CopySpec
		contents {
			from('build/docs/groovydoc') { include '**/*' }
			into "${project.name}"
		}
	
	
		// what to keep in the existing branch (include=keep)
		preserve {
			include '*/**'
			exclude '1.0.0/temp.txt'
		}
	
		// message used when committing changes
		commitMessage = 'Publishing version ' + "${version}" + ' documentation'
	}
	ext['groovy.version'] = '3.0.1'
	
	gitPublishPush.dependsOn 'fullGroovydoc'
//	task publishDocs( type: Copy ) {
//		from('build/docs/groovydoc') { include '**/*' }
//		into "${publishLocation}/${project.name}"
//		dependsOn 'fullGroovydoc'
//		
//	}
	// End generation of framework documentation
	sourceSets.main.resources {
		srcDir '../common/resources'
		//srcDir '../common/groovydoc'
		srcDir "${vaultResources}"
	}
	
	
		
	bootJar { enabled = false }
	group = 'dts'
	//version = '1.0.0-SNAPSHOT'
	sourceCompatibility = 1.8
	targetCompatibility = 1.8

	repositories {
		if ("${queue}" == 'Hosted') {
			mavenCentral()
			maven {
				name 'spring'
				url "http://repo.spring.io/plugins-release/"
			}
		}
		mavenLocal()
		maven {
			name 'ZionsNexusPublicSnapshots'
			url "${nexusUrl}/repository/public-snapshots/"
		}
		maven {
			name 'ZionsNexusPublic'
			url "${nexusUrl}/repository/public/"
		}
		//mavenCentral()
		  maven {
		    url 'https://dist.xebialabs.com/public/maven2'
		  }
	}

	dependencies {
		// https://mvnrepository.com/artifact/org.apache.httpcomponents/httpclient
		// https://mvnrepository.com/artifact/com.github.rholder/gradle-one-jar
		compile 'org.springframework.boot:spring-boot-starter'
		compile('org.springframework.cloud:spring-cloud-starter-vault-config')
		compile group: 'org.apache.httpcomponents', name: 'httpclient', version: '4.5.1'
		compile 'org.codehaus.groovy:groovy-dateutil:3.0.1'
		compile 'org.codehaus.groovy:groovy-yaml:3.0.1'
		compile 'org.codehaus.groovy:groovy-all:3.0.1'
		compile 'org.apache.ivy:ivy:2.4.0'
		compile 'bsf:bsf:2.4.0'
		compile 'commons-io:commons-io:2.5'
		compile 'commons-cli:commons-cli:1.3.1'
		//compile 'org.slf4j:slf4j-api:1.7.16'
		//		compile group: 'net.sf.json-lib', name: 'json-lib', version: '2.4'
		//		compile group: 'xom', name: 'xom', version: '1.2.5'

		compile('org.codehaus.groovy.modules.http-builder:http-builder:0.7.2') { exclude(module: 'groovy') }
	
		testCompile(
			'org.springframework.boot:spring-boot-starter-test',
			'org.springframework:spring-mock:2.0.8',
			'cglib:cglib-nodep:3.1',
			//'com.athaydes:spock-reports:1.6.2',
			//files('../libs/spock-reports-1.6.2.jar'),
			//'junit:junit:4.12'
			'org.junit.jupiter:junit-jupiter-api:5.6.2',
			'org.junit.jupiter:junit-jupiter-params:5.6.2',
			'org.objenesis:objenesis:2.4',
			'org.codehaus.groovy:groovy-all:3.0.1',
			'org.spockframework:spock-core:2.0-M2-groovy-3.0',
			//'org.spockframework:spock-junit4:2.0-M2-groovy-3.0',
			'org.spockframework:spock-spring:2.0-M2-groovy-3.0'
			)
		//testImplementation files('libs/spock-reports-1.6.2.jar')
		//implementation ('org.junit.jupiter:junit-jupiter-api:5.5.2')
		testRuntime('org.junit.jupiter:junit-jupiter-engine:5.6.2')
	}
	dependencyManagement {
		imports {
			mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
		}
	}
	test { //String activeProfile =  System.properties['spring.profiles.active']
		doFirst {
			mkdir "build/spock"
		}
		systemProperty "spring.profiles.active", 'test'
		useJUnitPlatform()
	}
}

