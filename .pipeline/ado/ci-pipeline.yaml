name: $(date:yyyyMMdd)$(rev:.rrr)
variables:
- group: "Release Engineering - secrets"
parameters:
- name: pool_name
  displayName: Pool Name
  type: string
  default: Ephemeral PROD
  values:
  - "Ephemeral PROD"
  - "Ephemeral STAGE"
  - "Ephemeral TESTQA"
  - "Ephemeral DEBUG_P"
  - "Ephemeral DEBUG_T"
trigger: none
resources:
  repositories:
  - repository: zions-ado-templates
    name: DTS/zions-ado-templates
    ref: refs/tags/v0.2.6
    type: git
extends:
  template: required-templates/dts-ci-template.yaml@zions-ado-templates
  parameters:
    # Build
    build_pool_name: ${{ parameters.pool_name }}
    build_pool_demands:
    - "agent.os -equals Linux"
   
    build_steps:
    
    - script: |
        # Alternatively, you may manually implement the following steps:
        #   1) Pick the latest CodeQL release bundle from GitHub.
        #      TBD: scrape release page, find version to download from here: https://api.github.com/repos/github/codeql-action/releases/latest
        #   2) Download and unzip the bundle to the following directory inside theâ€¯agent tool directory, 
        #      typically located under _work/_tool: ./CodeQL/0.0.0-[codeql-release-bundle-tag]/x64/. 
        #      Using the current release of v2.16.0, the folder name would be titled ./CodeQL/0.0.0-codeql-bundle-v2.16.0/x64/
        NEXUS_REPO=https://nexus.cs.zionsbank.com/repository/github-releases
        VERSION=v2.18.3
        BUNDLE=${NEXUS_REPO}/github/codeql-action/releases/download/codeql-bundle-${VERSION}/codeql-bundle-linux64.tar.gz
        echo "##[group]Installing CodeQL Bundle ${VERSION} on agent."
        echo "##[debug]Downloading [${BUNDLE}]"
        mkdir -p ${AGENT_TEMPDIRECTORY}/codeql-bundle
        curl -L --retry 5 --retry-connrefused -o ${AGENT_TEMPDIRECTORY}/codeql-bundle/codeql-bundle-linux64.tar.gz ${BUNDLE}
        if ! [[ -s "${AGENT_TEMPDIRECTORY}/codeql-bundle/codeql-bundle-linux64.tar.gz" ]]; then
          echo "##vso[task.logissue type=error]File doesn't exist or is empty, download failed."
          exit 1
        elif ! gzip -t -v "${AGENT_TEMPDIRECTORY}/codeql-bundle/codeql-bundle-linux64.tar.gz"; then
          echo "##vso[task.logissue type=error]File isn't valid gzip, download failed."
          exit 1
        fi
        echo "##[debug]Extracting archive to ${AGENT_TOOLSDIRECTORY} directory"
        TOOL_DEST=${AGENT_TOOLSDIRECTORY}/CodeQL/0.0.0-codeql-bundle-${VERSION}
        mkdir -p ${TOOL_DEST}/x64
        tar -xzf ${AGENT_TEMPDIRECTORY}/codeql-bundle/codeql-bundle-linux64.tar.gz -C ${TOOL_DEST}/x64
        echo "##[debug]Checking CodeQL Bundle version"
        ${TOOL_DEST}/x64/codeql/codeql --version
        # #   3) Create an empty file titled x64.complete within the ./CodeQL/0.0.0-[codeql-release-bundle-tag] folder. 
        # #      Using the previous example, the end file path to your x64.complete file should be ./CodeQL/0.0.0-codeql-bundle-v2.16.0/x64.complete.
        touch ${TOOL_DEST}/x64.complete
        echo "##[debug]Exporting updated environment variable(s)"
        echo "##vso[task.prependpath]${TOOL_DEST}/x64/codeql"
        echo "##[endgroup]"
      displayName: "Install CodeQL Bundle"

    # - script: |
    #     VERSION=6
    #     echo "##[group]Installing .Net ${VERSION}.0 on agent."
    #     sudo dnf install dotnet-sdk-${VERSION}.0
    #     echo "##[debug].NET version"
    #     dotnet --version
    #     echo "##vso[task.prependpath]$HOME/.dotnet/tools"
    #     echo "##[endgroup]"
    #   displayName: "Install .Net 6.0"
    
    - ${{ if contains(lower(parameters.pool_name), 'ephemeral') }}:
      - template: /templates/step/install-tools.yaml@zions-ado-templates
        parameters:
          tools:
            - name: dotnet
              version: 6
            - name: gradle
              version: 6.8.3

    # - task: AdvancedSecurity-Codeql-Init@1
    #   inputs:
    #     # languages: 'csharp, cpp, go, java, javascript, python, ruby, swift'
    #     languages: 'java'
    #     querysuite: 'security-extended'
    #     buildtype: 'None'

    # - template: /templates/step/build/gradle.yaml@zions-ado-templates
    #   parameters:
    #     gradleWrapperFile: $(Build.SourcesDirectory)/gradlew
    #     workingDirectory: $(Build.SourcesDirectory)
    #     options: '-b build.gradle -Pqueue=default -Pcontext=all -PbuildType=ci'
    #     tasks: 'clean build'
    #     publishJUnitResults: true

    # - task: Gradle@3
    #   displayName: 'Gradle: clean build'
    #   inputs:
    #     gradleWrapperFile: $(Build.SourcesDirectory)/gradlew
    #     workingDirectory: $(Build.SourcesDirectory)
    #     options: '--no-daemon -b build.gradle -Pqueue=default -Pcontext=all -PbuildType=ci'
    #     tasks: clean build
    #     publishJUnitResults: true
    
    - script: |
        codeql database create java-database --language=java- --command='gradle --no-daemon -b build.gradle -Pqueue=default -Pcontext=all -PbuildType=ci'

    - template: /templates/step/scan/nexusiq.yaml@zions-ado-templates
      parameters:
        scanTargets: "zions-common/build/libs/*.jar,zions-common-data/build/libs/*.jar,zions-vsts-services/build/libs/*.jar,zions-vsts-microservice/build/libs/*.jar"
        organizationId: "bc29079689124c8bbef346a3d149e714"
    - task: AdvancedSecurity-Dependency-Scanning@1
    - task: AdvancedSecurity-Codeql-Analyze@1