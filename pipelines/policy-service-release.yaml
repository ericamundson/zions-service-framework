name: $(date:yyyyMMdd)$(rev:.rrr)

parameters:
- name: pool_name
  displayName: Pool Name
  type: string
  default: On-Prem Production
  values:
  - On-Prem Production
  - On-Prem DR

trigger:
  branches:
    include:
    - master
  paths:
    include:
    - 'zions-vsts-policy-microservice/*'
    - 'zions-vsts-services/src/main/groovy/com/zions/vsts/services/policy/*'

stages:
- stage: Build
  jobs:
  # Job: build - checkout, compile
  - job: Build
    pool:
      name: ${{ parameters.pool_name }}
      demands:
        - agent.computername -equals UTMVPI0144
    workspace:
      # all - delete these dirs: _work/1, _work/1/a, _work/1/TestResults, _work\1\b, _work\1\s
      # resources - delete these dirs: _work/1/a, _work/1/TestResults, _work\1\s
      # outputs - delete these dirs: _work/1/a, _work/1/TestResults, _work\1\b
      clean: resources 
    steps:
    # TagBuild: set output variable zions.buildnumber
    - task: Zions.zions-vsts-build.tag-build-task.TagBuild@3
      displayName: 'Tag'
      inputs:
        OutputVariable: buildTag
        InitialVersionPrefix: 7.0.0
        WriteTag: true
    - script: |
        echo ##vso[task.setvariable variable=oBuildTag;isOutput=true]$(buildTag)
      name: 'oTag'
    # Gradle: execute gradle tasks with options
    - task: Gradle@2
      displayName: 'gradlew clean build'
      inputs:
        gradleWrapperFile: '$(Build.SourcesDirectory)/gradlew.bat'
        workingDirectory: '$(Build.SourcesDirectory)'
        options: '--no-daemon --no-scan  --refresh-dependencies -Pversion=$(buildTag) -Pqueue=default -Pcontext=release'
        tasks: 'clean build'
        publishJUnitResults: false
#    - task: SonatypeIntegrations.nexus-iq-azure-extension.nexus-iq-azure-pipeline-task.NexusIqPipelineTask@1

#      displayName: 'Nexus IQ policy evaluation'
#      inputs:
#        nexusIqService: 'Nexus IQ - Production'
#        applicationId: 'zions-ire-test-microservice.jar'
#        scanTargets: 'build/libs/*.jar'
    # ReplaceTokens: xld-application.yaml
        
    # XldApplyTask: .pipeline\xl-apps.yaml
    - task: Zions.ado-ext-release-status-control.XldApplyTask.XldApplyTask@0
      displayName: 'XLD Apply'
      inputs:
        xldFile: pipelines\xld-policy-apps.yaml
        xlValues: |
          app_version=$(buildTag)
          xld_cli_user=$[xl.user]
          xld_cli_passwd=$[xl.password]
          svc_account_passwd=$[svc_account_passwd]

- stage: Release
  dependsOn: Build
  jobs:
  - deployment: prod
    environment: Windows_Production
    variables:
      releaseTag: $[ stageDependencies.Build.Build.outputs['oTag.oBuildTag'] ]
    strategy:
      runOnce:
        deploy:
          steps:
          - task: Zions.ado-ext-release-status-control.CreateReleaseTask.CreateReleaseTask@0
            displayName: 'Create Release'
            inputs:
              templateTitle: 'DTS/zions-ire-test-microservice - Master'
              releaseTitle: 'zions-ire-test-microservice - $(releaseTag)'
              releaseVariableSettings: 'deploymentPackage.name=$(releaseTag)'